/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import cida.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramaPrograma(AProgramaPrograma node);
    void caseABlocoBloco(ABlocoBloco node);
    void caseAAlterableDeclaracao(AAlterableDeclaracao node);
    void caseAUnalterableDeclaracao(AUnalterableDeclaracao node);
    void caseAAtribuicaoOpcionalAtribuicaoOpcional(AAtribuicaoOpcionalAtribuicaoOpcional node);
    void caseAVazioAtribuicaoAtribuicaoOpcional(AVazioAtribuicaoAtribuicaoOpcional node);
    void caseANumberTipoBase(ANumberTipoBase node);
    void caseAAnswerTipoBase(AAnswerTipoBase node);
    void caseASymbolTipoBase(ASymbolTipoBase node);
    void caseADefaultTipo(ADefaultTipo node);
    void caseAVectorTipo(AVectorTipo node);
    void caseAIdentificadorLocal(AIdentificadorLocal node);
    void caseAEnderecoLocal(AEnderecoLocal node);
    void caseAAddressAddress(AAddressAddress node);
    void caseAAtribComando(AAtribComando node);
    void caseAAsLongAsComando(AAsLongAsComando node);
    void caseAConsideringComando(AConsideringComando node);
    void caseAConditionalComando(AConditionalComando node);
    void caseACaptureComando(ACaptureComando node);
    void caseAShowComando(AShowComando node);
    void caseABlocoComando(ABlocoComando node);
    void caseAOnlyComandoOtherwiseExpr(AOnlyComandoOtherwiseExpr node);
    void caseAOtherwiseExprOtherwiseExpr(AOtherwiseExprOtherwiseExpr node);
    void caseALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node);
    void caseAExprVirgulaExprVirgula(AExprVirgulaExprVirgula node);
    void caseAExprOrExpr(AExprOrExpr node);
    void caseAExprAndExprOr(AExprAndExprOr node);
    void caseAOrExprOr(AOrExprOr node);
    void caseAExprNegacaoExprAnd(AExprNegacaoExprAnd node);
    void caseAAndExprAnd(AAndExprAnd node);
    void caseAExprIgualdadeExprNegacao(AExprIgualdadeExprNegacao node);
    void caseANotExprNegacao(ANotExprNegacao node);
    void caseAExprMaiorIgualExprIgualdade(AExprMaiorIgualExprIgualdade node);
    void caseAIgualdadeExprIgualdade(AIgualdadeExprIgualdade node);
    void caseAExprMaiorExprMaiorIgual(AExprMaiorExprMaiorIgual node);
    void caseAMaiorIgualExprMaiorIgual(AMaiorIgualExprMaiorIgual node);
    void caseAExprMenorExprMaior(AExprMenorExprMaior node);
    void caseAMaiorExprMaior(AMaiorExprMaior node);
    void caseAExprMenorIgualExprMenor(AExprMenorIgualExprMenor node);
    void caseAMenorExprMenor(AMenorExprMenor node);
    void caseAExprDiferenteExprMenorIgual(AExprDiferenteExprMenorIgual node);
    void caseAMenorIgualExprMenorIgual(AMenorIgualExprMenorIgual node);
    void caseAExprMatematicaExprDiferente(AExprMatematicaExprDiferente node);
    void caseADiferenteExprDiferente(ADiferenteExprDiferente node);
    void caseAFatorExprMatematica(AFatorExprMatematica node);
    void caseASomaExprMatematica(ASomaExprMatematica node);
    void caseAMenosExprMatematica(AMenosExprMatematica node);
    void caseAExprNegativoFator(AExprNegativoFator node);
    void caseAMultiplicacaoFator(AMultiplicacaoFator node);
    void caseADivisaoFator(ADivisaoFator node);
    void caseATermoExprNegativo(ATermoExprNegativo node);
    void caseANegativoExprNegativo(ANegativoExprNegativo node);
    void caseANumberTermo(ANumberTermo node);
    void caseAAnswerTermo(AAnswerTermo node);
    void caseASymbolTermo(ASymbolTermo node);
    void caseASymbolVectorTermo(ASymbolVectorTermo node);
    void caseALocalTermo(ALocalTermo node);
    void caseAParentesesTermo(AParentesesTermo node);
    void caseAYesAnswer(AYesAnswer node);
    void caseANoAnswer(ANoAnswer node);

    void caseTNot(TNot node);
    void caseTPonto(TPonto node);
    void caseTVirgula(TVirgula node);
    void caseTCode(TCode node);
    void caseTTipoNumber(TTipoNumber node);
    void caseTTipoAnswer(TTipoAnswer node);
    void caseTTipoSymbol(TTipoSymbol node);
    void caseTParenteseE(TParenteseE node);
    void caseTParenteseD(TParenteseD node);
    void caseTColcheteE(TColcheteE node);
    void caseTColcheteD(TColcheteD node);
    void caseTMenos(TMenos node);
    void caseTMais(TMais node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivisao(TDivisao node);
    void caseTModulo(TModulo node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTIgualdade(TIgualdade node);
    void caseTDiferente(TDiferente node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTNegacao(TNegacao node);
    void caseTAnd(TAnd node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTThat(TThat node);
    void caseTOtherwise(TOtherwise node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTDo(TDo node);
    void caseTUnalterable(TUnalterable node);
    void caseTAlterable(TAlterable node);
    void caseTVector(TVector node);
    void caseTStart(TStart node);
    void caseTFinish(TFinish node);
    void caseTCapture(TCapture node);
    void caseTShow(TShow node);
    void caseTYes(TYes node);
    void caseTNo(TNo node);
    void caseTId(TId node);
    void caseTSymbol(TSymbol node);
    void caseTSymbolVector(TSymbolVector node);
    void caseTComentarioBloco(TComentarioBloco node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTNumber(TNumber node);
    void caseTVazio(TVazio node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}

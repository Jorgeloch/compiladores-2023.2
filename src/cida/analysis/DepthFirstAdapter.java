/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPPrograma().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgramaPrograma(AProgramaPrograma node)
    {
        defaultIn(node);
    }

    public void outAProgramaPrograma(AProgramaPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        inAProgramaPrograma(node);
        if(node.getCode() != null)
        {
            node.getCode().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAProgramaPrograma(node);
    }

    public void inABlocoBloco(ABlocoBloco node)
    {
        defaultIn(node);
    }

    public void outABlocoBloco(ABlocoBloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        inABlocoBloco(node);
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getFinish() != null)
        {
            node.getFinish().apply(this);
        }
        outABlocoBloco(node);
    }

    public void inAAlterableDeclaracao(AAlterableDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAlterableDeclaracao(AAlterableDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlterableDeclaracao(AAlterableDeclaracao node)
    {
        inAAlterableDeclaracao(node);
        if(node.getAlterable() != null)
        {
            node.getAlterable().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAAlterableDeclaracao(node);
    }

    public void inAUnalterableDeclaracao(AUnalterableDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAUnalterableDeclaracao(AUnalterableDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnalterableDeclaracao(AUnalterableDeclaracao node)
    {
        inAUnalterableDeclaracao(node);
        if(node.getUnalterable() != null)
        {
            node.getUnalterable().apply(this);
        }
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getAtribuicaoOpcional() != null)
        {
            node.getAtribuicaoOpcional().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAUnalterableDeclaracao(node);
    }

    public void inAAtribuicaoOpcionalAtribuicaoOpcional(AAtribuicaoOpcionalAtribuicaoOpcional node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoOpcionalAtribuicaoOpcional(AAtribuicaoOpcionalAtribuicaoOpcional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoOpcionalAtribuicaoOpcional(AAtribuicaoOpcionalAtribuicaoOpcional node)
    {
        inAAtribuicaoOpcionalAtribuicaoOpcional(node);
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAtribuicaoOpcionalAtribuicaoOpcional(node);
    }

    public void inAVazioAtribuicaoAtribuicaoOpcional(AVazioAtribuicaoAtribuicaoOpcional node)
    {
        defaultIn(node);
    }

    public void outAVazioAtribuicaoAtribuicaoOpcional(AVazioAtribuicaoAtribuicaoOpcional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVazioAtribuicaoAtribuicaoOpcional(AVazioAtribuicaoAtribuicaoOpcional node)
    {
        inAVazioAtribuicaoAtribuicaoOpcional(node);
        outAVazioAtribuicaoAtribuicaoOpcional(node);
    }

    public void inANumberTipoBase(ANumberTipoBase node)
    {
        defaultIn(node);
    }

    public void outANumberTipoBase(ANumberTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTipoBase(ANumberTipoBase node)
    {
        inANumberTipoBase(node);
        if(node.getTipoNumber() != null)
        {
            node.getTipoNumber().apply(this);
        }
        outANumberTipoBase(node);
    }

    public void inAAnswerTipoBase(AAnswerTipoBase node)
    {
        defaultIn(node);
    }

    public void outAAnswerTipoBase(AAnswerTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerTipoBase(AAnswerTipoBase node)
    {
        inAAnswerTipoBase(node);
        if(node.getTipoAnswer() != null)
        {
            node.getTipoAnswer().apply(this);
        }
        outAAnswerTipoBase(node);
    }

    public void inASymbolTipoBase(ASymbolTipoBase node)
    {
        defaultIn(node);
    }

    public void outASymbolTipoBase(ASymbolTipoBase node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolTipoBase(ASymbolTipoBase node)
    {
        inASymbolTipoBase(node);
        if(node.getTipoSymbol() != null)
        {
            node.getTipoSymbol().apply(this);
        }
        outASymbolTipoBase(node);
    }

    public void inADefaultTipo(ADefaultTipo node)
    {
        defaultIn(node);
    }

    public void outADefaultTipo(ADefaultTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefaultTipo(ADefaultTipo node)
    {
        inADefaultTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        outADefaultTipo(node);
    }

    public void inAVectorTipo(AVectorTipo node)
    {
        defaultIn(node);
    }

    public void outAVectorTipo(AVectorTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVectorTipo(AVectorTipo node)
    {
        inAVectorTipo(node);
        if(node.getTipoBase() != null)
        {
            node.getTipoBase().apply(this);
        }
        if(node.getVector() != null)
        {
            node.getVector().apply(this);
        }
        {
            List<PAddress> copy = new ArrayList<PAddress>(node.getAddress());
            for(PAddress e : copy)
            {
                e.apply(this);
            }
        }
        outAVectorTipo(node);
    }

    public void inAIdentificadorLocal(AIdentificadorLocal node)
    {
        defaultIn(node);
    }

    public void outAIdentificadorLocal(AIdentificadorLocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentificadorLocal(AIdentificadorLocal node)
    {
        inAIdentificadorLocal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdentificadorLocal(node);
    }

    public void inAEnderecoLocal(AEnderecoLocal node)
    {
        defaultIn(node);
    }

    public void outAEnderecoLocal(AEnderecoLocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnderecoLocal(AEnderecoLocal node)
    {
        inAEnderecoLocal(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getAddress() != null)
        {
            node.getAddress().apply(this);
        }
        outAEnderecoLocal(node);
    }

    public void inAAddressAddress(AAddressAddress node)
    {
        defaultIn(node);
    }

    public void outAAddressAddress(AAddressAddress node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddressAddress(AAddressAddress node)
    {
        inAAddressAddress(node);
        if(node.getColcheteE() != null)
        {
            node.getColcheteE().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getColcheteD() != null)
        {
            node.getColcheteD().apply(this);
        }
        outAAddressAddress(node);
    }

    public void inAAtribComando(AAtribComando node)
    {
        defaultIn(node);
    }

    public void outAAtribComando(AAtribComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribComando(AAtribComando node)
    {
        inAAtribComando(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAAtribComando(node);
    }

    public void inAAsLongAsComando(AAsLongAsComando node)
    {
        defaultIn(node);
    }

    public void outAAsLongAsComando(AAsLongAsComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAsLongAsComando(AAsLongAsComando node)
    {
        inAAsLongAsComando(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getLong() != null)
        {
            node.getLong().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAAsLongAsComando(node);
    }

    public void inAConsideringComando(AConsideringComando node)
    {
        defaultIn(node);
    }

    public void outAConsideringComando(AConsideringComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConsideringComando(AConsideringComando node)
    {
        inAConsideringComando(node);
        if(node.getConsidering() != null)
        {
            node.getConsidering().apply(this);
        }
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getFrom() != null)
        {
            node.getFrom().apply(this);
        }
        if(node.getStart() != null)
        {
            node.getStart().apply(this);
        }
        if(node.getTo() != null)
        {
            node.getTo().apply(this);
        }
        if(node.getFinish() != null)
        {
            node.getFinish().apply(this);
        }
        if(node.getBy() != null)
        {
            node.getBy().apply(this);
        }
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAConsideringComando(node);
    }

    public void inAConditionalComando(AConditionalComando node)
    {
        defaultIn(node);
    }

    public void outAConditionalComando(AConditionalComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionalComando(AConditionalComando node)
    {
        inAConditionalComando(node);
        if(node.getIn() != null)
        {
            node.getIn().apply(this);
        }
        if(node.getCase() != null)
        {
            node.getCase().apply(this);
        }
        if(node.getThat() != null)
        {
            node.getThat().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getOtherwiseExpr() != null)
        {
            node.getOtherwiseExpr().apply(this);
        }
        outAConditionalComando(node);
    }

    public void inACaptureComando(ACaptureComando node)
    {
        defaultIn(node);
    }

    public void outACaptureComando(ACaptureComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaptureComando(ACaptureComando node)
    {
        inACaptureComando(node);
        if(node.getCapture() != null)
        {
            node.getCapture().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        {
            List<PLocalVirgula> copy = new ArrayList<PLocalVirgula>(node.getLocais());
            for(PLocalVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outACaptureComando(node);
    }

    public void inAShowComando(AShowComando node)
    {
        defaultIn(node);
    }

    public void outAShowComando(AShowComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        inAShowComando(node);
        if(node.getShow() != null)
        {
            node.getShow().apply(this);
        }
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        {
            List<PExprVirgula> copy = new ArrayList<PExprVirgula>(node.getExprVirgula());
            for(PExprVirgula e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        if(node.getPonto() != null)
        {
            node.getPonto().apply(this);
        }
        outAShowComando(node);
    }

    public void inABlocoComando(ABlocoComando node)
    {
        defaultIn(node);
    }

    public void outABlocoComando(ABlocoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        inABlocoComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outABlocoComando(node);
    }

    public void inAOnlyComandoOtherwiseExpr(AOnlyComandoOtherwiseExpr node)
    {
        defaultIn(node);
    }

    public void outAOnlyComandoOtherwiseExpr(AOnlyComandoOtherwiseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOnlyComandoOtherwiseExpr(AOnlyComandoOtherwiseExpr node)
    {
        inAOnlyComandoOtherwiseExpr(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAOnlyComandoOtherwiseExpr(node);
    }

    public void inAOtherwiseExprOtherwiseExpr(AOtherwiseExprOtherwiseExpr node)
    {
        defaultIn(node);
    }

    public void outAOtherwiseExprOtherwiseExpr(AOtherwiseExprOtherwiseExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOtherwiseExprOtherwiseExpr(AOtherwiseExprOtherwiseExpr node)
    {
        inAOtherwiseExprOtherwiseExpr(node);
        if(node.getOtherwise() != null)
        {
            node.getOtherwise().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAOtherwiseExprOtherwiseExpr(node);
    }

    public void inALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        defaultIn(node);
    }

    public void outALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        inALocalVirgulaLocalVirgula(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outALocalVirgulaLocalVirgula(node);
    }

    public void inAExprVirgulaExprVirgula(AExprVirgulaExprVirgula node)
    {
        defaultIn(node);
    }

    public void outAExprVirgulaExprVirgula(AExprVirgulaExprVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprVirgulaExprVirgula(AExprVirgulaExprVirgula node)
    {
        inAExprVirgulaExprVirgula(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        outAExprVirgulaExprVirgula(node);
    }

    public void inAExprOrExpr(AExprOrExpr node)
    {
        defaultIn(node);
    }

    public void outAExprOrExpr(AExprOrExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprOrExpr(AExprOrExpr node)
    {
        inAExprOrExpr(node);
        if(node.getExprOr() != null)
        {
            node.getExprOr().apply(this);
        }
        outAExprOrExpr(node);
    }

    public void inAExprAndExprOr(AExprAndExprOr node)
    {
        defaultIn(node);
    }

    public void outAExprAndExprOr(AExprAndExprOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprAndExprOr(AExprAndExprOr node)
    {
        inAExprAndExprOr(node);
        if(node.getExprAnd() != null)
        {
            node.getExprAnd().apply(this);
        }
        outAExprAndExprOr(node);
    }

    public void inAOrExprOr(AOrExprOr node)
    {
        defaultIn(node);
    }

    public void outAOrExprOr(AOrExprOr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOrExprOr(AOrExprOr node)
    {
        inAOrExprOr(node);
        if(node.getExprOr() != null)
        {
            node.getExprOr().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getExprAnd() != null)
        {
            node.getExprAnd().apply(this);
        }
        outAOrExprOr(node);
    }

    public void inAExprNegacaoExprAnd(AExprNegacaoExprAnd node)
    {
        defaultIn(node);
    }

    public void outAExprNegacaoExprAnd(AExprNegacaoExprAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNegacaoExprAnd(AExprNegacaoExprAnd node)
    {
        inAExprNegacaoExprAnd(node);
        if(node.getExprNegacao() != null)
        {
            node.getExprNegacao().apply(this);
        }
        outAExprNegacaoExprAnd(node);
    }

    public void inAAndExprAnd(AAndExprAnd node)
    {
        defaultIn(node);
    }

    public void outAAndExprAnd(AAndExprAnd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExprAnd(AAndExprAnd node)
    {
        inAAndExprAnd(node);
        if(node.getExprAnd() != null)
        {
            node.getExprAnd().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getExprNegacao() != null)
        {
            node.getExprNegacao().apply(this);
        }
        outAAndExprAnd(node);
    }

    public void inAExprIgualdadeExprNegacao(AExprIgualdadeExprNegacao node)
    {
        defaultIn(node);
    }

    public void outAExprIgualdadeExprNegacao(AExprIgualdadeExprNegacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprIgualdadeExprNegacao(AExprIgualdadeExprNegacao node)
    {
        inAExprIgualdadeExprNegacao(node);
        if(node.getExprIgualdade() != null)
        {
            node.getExprIgualdade().apply(this);
        }
        outAExprIgualdadeExprNegacao(node);
    }

    public void inANotExprNegacao(ANotExprNegacao node)
    {
        defaultIn(node);
    }

    public void outANotExprNegacao(ANotExprNegacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotExprNegacao(ANotExprNegacao node)
    {
        inANotExprNegacao(node);
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        if(node.getExprNegacao() != null)
        {
            node.getExprNegacao().apply(this);
        }
        outANotExprNegacao(node);
    }

    public void inAExprMaiorIgualExprIgualdade(AExprMaiorIgualExprIgualdade node)
    {
        defaultIn(node);
    }

    public void outAExprMaiorIgualExprIgualdade(AExprMaiorIgualExprIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMaiorIgualExprIgualdade(AExprMaiorIgualExprIgualdade node)
    {
        inAExprMaiorIgualExprIgualdade(node);
        if(node.getExprMaiorIgual() != null)
        {
            node.getExprMaiorIgual().apply(this);
        }
        outAExprMaiorIgualExprIgualdade(node);
    }

    public void inAIgualdadeExprIgualdade(AIgualdadeExprIgualdade node)
    {
        defaultIn(node);
    }

    public void outAIgualdadeExprIgualdade(AIgualdadeExprIgualdade node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualdadeExprIgualdade(AIgualdadeExprIgualdade node)
    {
        inAIgualdadeExprIgualdade(node);
        if(node.getExprIgualdade() != null)
        {
            node.getExprIgualdade().apply(this);
        }
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        if(node.getExprMaiorIgual() != null)
        {
            node.getExprMaiorIgual().apply(this);
        }
        outAIgualdadeExprIgualdade(node);
    }

    public void inAExprMaiorExprMaiorIgual(AExprMaiorExprMaiorIgual node)
    {
        defaultIn(node);
    }

    public void outAExprMaiorExprMaiorIgual(AExprMaiorExprMaiorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMaiorExprMaiorIgual(AExprMaiorExprMaiorIgual node)
    {
        inAExprMaiorExprMaiorIgual(node);
        if(node.getExprMaior() != null)
        {
            node.getExprMaior().apply(this);
        }
        outAExprMaiorExprMaiorIgual(node);
    }

    public void inAMaiorIgualExprMaiorIgual(AMaiorIgualExprMaiorIgual node)
    {
        defaultIn(node);
    }

    public void outAMaiorIgualExprMaiorIgual(AMaiorIgualExprMaiorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorIgualExprMaiorIgual(AMaiorIgualExprMaiorIgual node)
    {
        inAMaiorIgualExprMaiorIgual(node);
        if(node.getExprMaiorIgual() != null)
        {
            node.getExprMaiorIgual().apply(this);
        }
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        if(node.getExprMaior() != null)
        {
            node.getExprMaior().apply(this);
        }
        outAMaiorIgualExprMaiorIgual(node);
    }

    public void inAExprMenorExprMaior(AExprMenorExprMaior node)
    {
        defaultIn(node);
    }

    public void outAExprMenorExprMaior(AExprMenorExprMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMenorExprMaior(AExprMenorExprMaior node)
    {
        inAExprMenorExprMaior(node);
        if(node.getExprMenor() != null)
        {
            node.getExprMenor().apply(this);
        }
        outAExprMenorExprMaior(node);
    }

    public void inAMaiorExprMaior(AMaiorExprMaior node)
    {
        defaultIn(node);
    }

    public void outAMaiorExprMaior(AMaiorExprMaior node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExprMaior(AMaiorExprMaior node)
    {
        inAMaiorExprMaior(node);
        if(node.getExprMaior() != null)
        {
            node.getExprMaior().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExprMenor() != null)
        {
            node.getExprMenor().apply(this);
        }
        outAMaiorExprMaior(node);
    }

    public void inAExprMenorIgualExprMenor(AExprMenorIgualExprMenor node)
    {
        defaultIn(node);
    }

    public void outAExprMenorIgualExprMenor(AExprMenorIgualExprMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMenorIgualExprMenor(AExprMenorIgualExprMenor node)
    {
        inAExprMenorIgualExprMenor(node);
        if(node.getExprMenorIgual() != null)
        {
            node.getExprMenorIgual().apply(this);
        }
        outAExprMenorIgualExprMenor(node);
    }

    public void inAMenorExprMenor(AMenorExprMenor node)
    {
        defaultIn(node);
    }

    public void outAMenorExprMenor(AMenorExprMenor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExprMenor(AMenorExprMenor node)
    {
        inAMenorExprMenor(node);
        if(node.getExprMenor() != null)
        {
            node.getExprMenor().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExprMenorIgual() != null)
        {
            node.getExprMenorIgual().apply(this);
        }
        outAMenorExprMenor(node);
    }

    public void inAExprDiferenteExprMenorIgual(AExprDiferenteExprMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAExprDiferenteExprMenorIgual(AExprDiferenteExprMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprDiferenteExprMenorIgual(AExprDiferenteExprMenorIgual node)
    {
        inAExprDiferenteExprMenorIgual(node);
        if(node.getExprDiferente() != null)
        {
            node.getExprDiferente().apply(this);
        }
        outAExprDiferenteExprMenorIgual(node);
    }

    public void inAMenorIgualExprMenorIgual(AMenorIgualExprMenorIgual node)
    {
        defaultIn(node);
    }

    public void outAMenorIgualExprMenorIgual(AMenorIgualExprMenorIgual node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorIgualExprMenorIgual(AMenorIgualExprMenorIgual node)
    {
        inAMenorIgualExprMenorIgual(node);
        if(node.getExprMenorIgual() != null)
        {
            node.getExprMenorIgual().apply(this);
        }
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        if(node.getExprDiferente() != null)
        {
            node.getExprDiferente().apply(this);
        }
        outAMenorIgualExprMenorIgual(node);
    }

    public void inAExprMatematicaExprDiferente(AExprMatematicaExprDiferente node)
    {
        defaultIn(node);
    }

    public void outAExprMatematicaExprDiferente(AExprMatematicaExprDiferente node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprMatematicaExprDiferente(AExprMatematicaExprDiferente node)
    {
        inAExprMatematicaExprDiferente(node);
        if(node.getExprMatematica() != null)
        {
            node.getExprMatematica().apply(this);
        }
        outAExprMatematicaExprDiferente(node);
    }

    public void inADiferenteExprDiferente(ADiferenteExprDiferente node)
    {
        defaultIn(node);
    }

    public void outADiferenteExprDiferente(ADiferenteExprDiferente node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExprDiferente(ADiferenteExprDiferente node)
    {
        inADiferenteExprDiferente(node);
        if(node.getExprDiferente() != null)
        {
            node.getExprDiferente().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getExprMatematica() != null)
        {
            node.getExprMatematica().apply(this);
        }
        outADiferenteExprDiferente(node);
    }

    public void inAFatorExprMatematica(AFatorExprMatematica node)
    {
        defaultIn(node);
    }

    public void outAFatorExprMatematica(AFatorExprMatematica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorExprMatematica(AFatorExprMatematica node)
    {
        inAFatorExprMatematica(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorExprMatematica(node);
    }

    public void inASomaExprMatematica(ASomaExprMatematica node)
    {
        defaultIn(node);
    }

    public void outASomaExprMatematica(ASomaExprMatematica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExprMatematica(ASomaExprMatematica node)
    {
        inASomaExprMatematica(node);
        if(node.getExprMatematica() != null)
        {
            node.getExprMatematica().apply(this);
        }
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASomaExprMatematica(node);
    }

    public void inAMenosExprMatematica(AMenosExprMatematica node)
    {
        defaultIn(node);
    }

    public void outAMenosExprMatematica(AMenosExprMatematica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosExprMatematica(AMenosExprMatematica node)
    {
        inAMenosExprMatematica(node);
        if(node.getExprMatematica() != null)
        {
            node.getExprMatematica().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAMenosExprMatematica(node);
    }

    public void inAExprNegativoFator(AExprNegativoFator node)
    {
        defaultIn(node);
    }

    public void outAExprNegativoFator(AExprNegativoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprNegativoFator(AExprNegativoFator node)
    {
        inAExprNegativoFator(node);
        if(node.getExprNegativo() != null)
        {
            node.getExprNegativo().apply(this);
        }
        outAExprNegativoFator(node);
    }

    public void inAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        inAMultiplicacaoFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        if(node.getExprNegativo() != null)
        {
            node.getExprNegativo().apply(this);
        }
        outAMultiplicacaoFator(node);
    }

    public void inADivisaoFator(ADivisaoFator node)
    {
        defaultIn(node);
    }

    public void outADivisaoFator(ADivisaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoFator(ADivisaoFator node)
    {
        inADivisaoFator(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        if(node.getExprNegativo() != null)
        {
            node.getExprNegativo().apply(this);
        }
        outADivisaoFator(node);
    }

    public void inATermoExprNegativo(ATermoExprNegativo node)
    {
        defaultIn(node);
    }

    public void outATermoExprNegativo(ATermoExprNegativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoExprNegativo(ATermoExprNegativo node)
    {
        inATermoExprNegativo(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoExprNegativo(node);
    }

    public void inANegativoExprNegativo(ANegativoExprNegativo node)
    {
        defaultIn(node);
    }

    public void outANegativoExprNegativo(ANegativoExprNegativo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExprNegativo(ANegativoExprNegativo node)
    {
        inANegativoExprNegativo(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        if(node.getExprNegativo() != null)
        {
            node.getExprNegativo().apply(this);
        }
        outANegativoExprNegativo(node);
    }

    public void inANumberTermo(ANumberTermo node)
    {
        defaultIn(node);
    }

    public void outANumberTermo(ANumberTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumberTermo(ANumberTermo node)
    {
        inANumberTermo(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumberTermo(node);
    }

    public void inAAnswerTermo(AAnswerTermo node)
    {
        defaultIn(node);
    }

    public void outAAnswerTermo(AAnswerTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAnswerTermo(AAnswerTermo node)
    {
        inAAnswerTermo(node);
        if(node.getAnswer() != null)
        {
            node.getAnswer().apply(this);
        }
        outAAnswerTermo(node);
    }

    public void inASymbolTermo(ASymbolTermo node)
    {
        defaultIn(node);
    }

    public void outASymbolTermo(ASymbolTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolTermo(ASymbolTermo node)
    {
        inASymbolTermo(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outASymbolTermo(node);
    }

    public void inASymbolVectorTermo(ASymbolVectorTermo node)
    {
        defaultIn(node);
    }

    public void outASymbolVectorTermo(ASymbolVectorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASymbolVectorTermo(ASymbolVectorTermo node)
    {
        inASymbolVectorTermo(node);
        if(node.getSymbolVector() != null)
        {
            node.getSymbolVector().apply(this);
        }
        outASymbolVectorTermo(node);
    }

    public void inALocalTermo(ALocalTermo node)
    {
        defaultIn(node);
    }

    public void outALocalTermo(ALocalTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalTermo(ALocalTermo node)
    {
        inALocalTermo(node);
        if(node.getLocal() != null)
        {
            node.getLocal().apply(this);
        }
        outALocalTermo(node);
    }

    public void inAParentesesTermo(AParentesesTermo node)
    {
        defaultIn(node);
    }

    public void outAParentesesTermo(AParentesesTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentesesTermo(AParentesesTermo node)
    {
        inAParentesesTermo(node);
        if(node.getParenteseE() != null)
        {
            node.getParenteseE().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getParenteseD() != null)
        {
            node.getParenteseD().apply(this);
        }
        outAParentesesTermo(node);
    }

    public void inAYesAnswer(AYesAnswer node)
    {
        defaultIn(node);
    }

    public void outAYesAnswer(AYesAnswer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAYesAnswer(AYesAnswer node)
    {
        inAYesAnswer(node);
        if(node.getYes() != null)
        {
            node.getYes().apply(this);
        }
        outAYesAnswer(node);
    }

    public void inANoAnswer(ANoAnswer node)
    {
        defaultIn(node);
    }

    public void outANoAnswer(ANoAnswer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoAnswer(ANoAnswer node)
    {
        inANoAnswer(node);
        if(node.getNo() != null)
        {
            node.getNo().apply(this);
        }
        outANoAnswer(node);
    }
}

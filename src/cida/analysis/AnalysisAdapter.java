/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramaPrograma(AProgramaPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoBloco(ABlocoBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAlterableDeclaracao(AAlterableDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAUnalterableDeclaracao(AUnalterableDeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribuicaoOpcionalAtribuicaoOpcional(AAtribuicaoOpcionalAtribuicaoOpcional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVazioAtribuicaoAtribuicaoOpcional(AVazioAtribuicaoAtribuicaoOpcional node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTipoBase(ANumberTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnswerTipoBase(AAnswerTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolTipoBase(ASymbolTipoBase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADefaultTipo(ADefaultTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVectorTipo(AVectorTipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIdentificadorLocal(AIdentificadorLocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnderecoLocal(AEnderecoLocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAddressAddress(AAddressAddress node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAtribComando(AAtribComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAsLongAsComando(AAsLongAsComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConsideringComando(AConsideringComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAConditionalComando(AConditionalComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseACaptureComando(ACaptureComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAShowComando(AShowComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABlocoComando(ABlocoComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOnlyComandoOtherwiseExpr(AOnlyComandoOtherwiseExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOtherwiseExprOtherwiseExpr(AOtherwiseExprOtherwiseExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalVirgulaLocalVirgula(ALocalVirgulaLocalVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprVirgulaExprVirgula(AExprVirgulaExprVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprOrExpr(AExprOrExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprAndExprOr(AExprAndExprOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOrExprOr(AOrExprOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNegacaoExprAnd(AExprNegacaoExprAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAndExprAnd(AAndExprAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprIgualdadeExprNegacao(AExprIgualdadeExprNegacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANotExprNegacao(ANotExprNegacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprMaiorIgualExprIgualdade(AExprMaiorIgualExprIgualdade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAIgualdadeExprIgualdade(AIgualdadeExprIgualdade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprMaiorExprMaiorIgual(AExprMaiorExprMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorIgualExprMaiorIgual(AMaiorIgualExprMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprMenorExprMaior(AExprMenorExprMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMaiorExprMaior(AMaiorExprMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprMenorIgualExprMenor(AExprMenorIgualExprMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorExprMenor(AMenorExprMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprDiferenteExprMenorIgual(AExprDiferenteExprMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenorIgualExprMenorIgual(AMenorIgualExprMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprMatematicaExprDiferente(AExprMatematicaExprDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADiferenteExprDiferente(ADiferenteExprDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFatorExprMatematica(AFatorExprMatematica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASomaExprMatematica(ASomaExprMatematica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMenosExprMatematica(AMenosExprMatematica node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAExprNegativoFator(AExprNegativoFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMultiplicacaoFator(AMultiplicacaoFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivisaoFator(ADivisaoFator node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATermoExprNegativo(ATermoExprNegativo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegativoExprNegativo(ANegativoExprNegativo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANumberTermo(ANumberTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAnswerTermo(AAnswerTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolTermo(ASymbolTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASymbolVectorTermo(ASymbolVectorTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALocalTermo(ALocalTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAParentesesTermo(AParentesesTermo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAYesAnswer(AYesAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANoAnswer(ANoAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCode(TCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTipoNumber(TTipoNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTipoAnswer(TTipoAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTipoSymbol(TTipoSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenteseE(TParenteseE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenteseD(TParenteseD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteE(TColcheteE node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTColcheteD(TColcheteD node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenos(TMenos node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMais(TMais node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMultiplicacao(TMultiplicacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDivisao(TDivisao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTModulo(TModulo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAtribuicao(TAtribuicao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgualdade(TIgualdade node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferente(TDiferente node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorIgual(TMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorIgual(TMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNegacao(TNegacao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThat(TThat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVector(TVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStart(TStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFinish(TFinish node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTYes(TYes node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNo(TNo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbolVector(TSymbolVector node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioBloco(TComentarioBloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTComentarioLinha(TComentarioLinha node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumber(TNumber node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}

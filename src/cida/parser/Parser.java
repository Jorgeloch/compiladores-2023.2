/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.parser;

import cida.lexer.*;
import cida.node.*;
import cida.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramaPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce ABlocoBloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAlterableDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce AUnalterableDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAtribuicaoOpcionalAtribuicaoOpcional */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AVazioAtribuicaoAtribuicaoOpcional */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce ANumberTipoBase */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list, false);
            }
            break;
            case 7: /* reduce AAnswerTipoBase */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ADefaultTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AVectorTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list, false);
            }
            break;
            case 11: /* reduce AIdentificadorLocal */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AEnderecoLocal */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AAddressAddress */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AAtribComando */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AAsLongAsComando */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AConsideringComando */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AConditionalComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AAcapturecomando1Comando */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAcapturecomando2Comando */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, false);
            }
            break;
            case 20: /* reduce AAshowcomando1Comando */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list, false);
            }
            break;
            case 21: /* reduce AAshowcomando2Comando */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list, false);
            }
            break;
            case 22: /* reduce ABlocoComando */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list, false);
            }
            break;
            case 23: /* reduce AOnlyComandoOtherwiseExpr */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list, false);
            }
            break;
            case 24: /* reduce AOtherwiseExprOtherwiseExpr */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list, false);
            }
            break;
            case 25: /* reduce ALocalVirgulaLocalVirgula */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list, false);
            }
            break;
            case 26: /* reduce AExprVirgulaExprVirgula */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce AExprOrExpr */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list, false);
            }
            break;
            case 28: /* reduce AExprAndExprOr */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AOrExprOr */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AExprNegacaoExprAnd */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AAndExprAnd */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AExprIgualdadeExprNegacao */
            {
                ArrayList<Object> list = new32();
                push(goTo(15), list, false);
            }
            break;
            case 33: /* reduce ANotExprNegacao */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AExprMaiorIgualExprIgualdade */
            {
                ArrayList<Object> list = new34();
                push(goTo(16), list, false);
            }
            break;
            case 35: /* reduce AIgualdadeExprIgualdade */
            {
                ArrayList<Object> list = new35();
                push(goTo(16), list, false);
            }
            break;
            case 36: /* reduce AExprMaiorExprMaiorIgual */
            {
                ArrayList<Object> list = new36();
                push(goTo(17), list, false);
            }
            break;
            case 37: /* reduce AMaiorIgualExprMaiorIgual */
            {
                ArrayList<Object> list = new37();
                push(goTo(17), list, false);
            }
            break;
            case 38: /* reduce AExprMenorExprMaior */
            {
                ArrayList<Object> list = new38();
                push(goTo(18), list, false);
            }
            break;
            case 39: /* reduce AMaiorExprMaior */
            {
                ArrayList<Object> list = new39();
                push(goTo(18), list, false);
            }
            break;
            case 40: /* reduce AExprMenorIgualExprMenor */
            {
                ArrayList<Object> list = new40();
                push(goTo(19), list, false);
            }
            break;
            case 41: /* reduce AMenorExprMenor */
            {
                ArrayList<Object> list = new41();
                push(goTo(19), list, false);
            }
            break;
            case 42: /* reduce AExprDiferenteExprMenorIgual */
            {
                ArrayList<Object> list = new42();
                push(goTo(20), list, false);
            }
            break;
            case 43: /* reduce AMenorIgualExprMenorIgual */
            {
                ArrayList<Object> list = new43();
                push(goTo(20), list, false);
            }
            break;
            case 44: /* reduce AExprMatematicaExprDiferente */
            {
                ArrayList<Object> list = new44();
                push(goTo(21), list, false);
            }
            break;
            case 45: /* reduce ADiferenteExprDiferente */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list, false);
            }
            break;
            case 46: /* reduce AFatorExprMatematica */
            {
                ArrayList<Object> list = new46();
                push(goTo(22), list, false);
            }
            break;
            case 47: /* reduce ASomaExprMatematica */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list, false);
            }
            break;
            case 48: /* reduce AMenosExprMatematica */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list, false);
            }
            break;
            case 49: /* reduce AExprNegativoFator */
            {
                ArrayList<Object> list = new49();
                push(goTo(23), list, false);
            }
            break;
            case 50: /* reduce AMultiplicacaoFator */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list, false);
            }
            break;
            case 51: /* reduce ADivisaoFator */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list, false);
            }
            break;
            case 52: /* reduce ATermoExprNegativo */
            {
                ArrayList<Object> list = new52();
                push(goTo(24), list, false);
            }
            break;
            case 53: /* reduce ANegativoExprNegativo */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list, false);
            }
            break;
            case 54: /* reduce ANumberTermo */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list, false);
            }
            break;
            case 55: /* reduce AAnswerTermo */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list, false);
            }
            break;
            case 56: /* reduce ASymbolTermo */
            {
                ArrayList<Object> list = new56();
                push(goTo(25), list, false);
            }
            break;
            case 57: /* reduce ASymbolVectorTermo */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list, false);
            }
            break;
            case 58: /* reduce ALocalTermo */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list, false);
            }
            break;
            case 59: /* reduce AParentesesTermo */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list, false);
            }
            break;
            case 60: /* reduce AYesAnswer */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list, false);
            }
            break;
            case 61: /* reduce ANoAnswer */
            {
                ArrayList<Object> list = new61();
                push(goTo(26), list, false);
            }
            break;
            case 62: /* reduce ATerminal$Address */
            {
                ArrayList<Object> list = new62();
                push(goTo(27), list, true);
            }
            break;
            case 63: /* reduce ANonTerminal$Address */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list, true);
            }
            break;
            case 64: /* reduce ATerminal$LocalVirgula */
            {
                ArrayList<Object> list = new64();
                push(goTo(28), list, true);
            }
            break;
            case 65: /* reduce ANonTerminal$LocalVirgula */
            {
                ArrayList<Object> list = new65();
                push(goTo(28), list, true);
            }
            break;
            case 66: /* reduce ATerminal$ExprVirgula */
            {
                ArrayList<Object> list = new66();
                push(goTo(29), list, true);
            }
            break;
            case 67: /* reduce ANonTerminal$ExprVirgula */
            {
                ArrayList<Object> list = new67();
                push(goTo(29), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramaPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        TCode tcodeNode2;
        TId tidNode3;
        PBloco pblocoNode4;
        tcodeNode2 = (TCode)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pblocoNode4 = (PBloco)nodeArrayList3.get(0);

        pprogramaNode1 = new AProgramaPrograma(tcodeNode2, tidNode3, pblocoNode4);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ABlocoBloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloco pblocoNode1;
        {
            // Block
        TStart tstartNode2;
        PDeclaracao pdeclaracaoNode3;
        PComando pcomandoNode4;
        TFinish tfinishNode5;
        tstartNode2 = (TStart)nodeArrayList1.get(0);
        pdeclaracaoNode3 = (PDeclaracao)nodeArrayList2.get(0);
        pcomandoNode4 = (PComando)nodeArrayList3.get(0);
        tfinishNode5 = (TFinish)nodeArrayList4.get(0);

        pblocoNode1 = new ABlocoBloco(tstartNode2, pdeclaracaoNode3, pcomandoNode4, tfinishNode5);
        }
	nodeList.add(pblocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAlterableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TAlterable talterableNode2;
        PTipo ptipoNode3;
        TId tidNode4;
        TPonto tpontoNode5;
        talterableNode2 = (TAlterable)nodeArrayList1.get(0);
        ptipoNode3 = (PTipo)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tpontoNode5 = (TPonto)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AAlterableDeclaracao(talterableNode2, ptipoNode3, tidNode4, tpontoNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AUnalterableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TUnalterable tunalterableNode2;
        PTipoBase ptipobaseNode3;
        TId tidNode4;
        PAtribuicaoOpcional patribuicaoopcionalNode5;
        TPonto tpontoNode6;
        tunalterableNode2 = (TUnalterable)nodeArrayList1.get(0);
        ptipobaseNode3 = (PTipoBase)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        patribuicaoopcionalNode5 = (PAtribuicaoOpcional)nodeArrayList4.get(0);
        tpontoNode6 = (TPonto)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new AUnalterableDeclaracao(tunalterableNode2, ptipobaseNode3, tidNode4, patribuicaoopcionalNode5, tpontoNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAtribuicaoOpcionalAtribuicaoOpcional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAtribuicaoOpcional patribuicaoopcionalNode1;
        {
            // Block
        TAtribuicao tatribuicaoNode2;
        PExpr pexprNode3;
        tatribuicaoNode2 = (TAtribuicao)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        patribuicaoopcionalNode1 = new AAtribuicaoOpcionalAtribuicaoOpcional(tatribuicaoNode2, pexprNode3);
        }
	nodeList.add(patribuicaoopcionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVazioAtribuicaoAtribuicaoOpcional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PAtribuicaoOpcional patribuicaoopcionalNode1;
        {
            // Block

        patribuicaoopcionalNode1 = new AVazioAtribuicaoAtribuicaoOpcional();
        }
	nodeList.add(patribuicaoopcionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ANumberTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoNumber ttiponumberNode2;
        ttiponumberNode2 = (TTipoNumber)nodeArrayList1.get(0);

        ptipobaseNode1 = new ANumberTipoBase(ttiponumberNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAnswerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoAnswer ttipoanswerNode2;
        ttipoanswerNode2 = (TTipoAnswer)nodeArrayList1.get(0);

        ptipobaseNode1 = new AAnswerTipoBase(ttipoanswerNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipoBase ptipobaseNode1;
        {
            // Block
        TTipoSymbol ttiposymbolNode2;
        ttiposymbolNode2 = (TTipoSymbol)nodeArrayList1.get(0);

        ptipobaseNode1 = new ASymbolTipoBase(ttiposymbolNode2);
        }
	nodeList.add(ptipobaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ADefaultTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);

        ptipoNode1 = new ADefaultTipo(ptipobaseNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AVectorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        PTipoBase ptipobaseNode2;
        TVector tvectorNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        ptipobaseNode2 = (PTipoBase)nodeArrayList1.get(0);
        tvectorNode3 = (TVector)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        ptipoNode1 = new AVectorTipo(ptipobaseNode2, tvectorNode3, listNode5);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AIdentificadorLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocal plocalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        plocalNode1 = new AIdentificadorLocal(tidNode2);
        }
	nodeList.add(plocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AEnderecoLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocal plocalNode1;
        {
            // Block
        PLocal plocalNode2;
        PAddress paddressNode3;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);
        paddressNode3 = (PAddress)nodeArrayList2.get(0);

        plocalNode1 = new AEnderecoLocal(plocalNode2, paddressNode3);
        }
	nodeList.add(plocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAddressAddress */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAddress paddressNode1;
        {
            // Block
        TColcheteE tcolcheteeNode2;
        PExpr pexprNode3;
        TColcheteD tcolchetedNode4;
        tcolcheteeNode2 = (TColcheteE)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tcolchetedNode4 = (TColcheteD)nodeArrayList3.get(0);

        paddressNode1 = new AAddressAddress(tcolcheteeNode2, pexprNode3, tcolchetedNode4);
        }
	nodeList.add(paddressNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAtribComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PLocal plocalNode2;
        TAtribuicao tatribuicaoNode3;
        PExpr pexprNode4;
        TPonto tpontoNode5;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tpontoNode5 = (TPonto)nodeArrayList4.get(0);

        pcomandoNode1 = new AAtribComando(plocalNode2, tatribuicaoNode3, pexprNode4, tpontoNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAsLongAsComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TAs tasNode2;
        TLong tlongNode3;
        TAs tasNode4;
        TParenteseE tparenteseeNode5;
        PExpr pexprNode6;
        TParenteseD tparentesedNode7;
        TDo tdoNode8;
        PComando pcomandoNode9;
        tasNode2 = (TAs)nodeArrayList1.get(0);
        tlongNode3 = (TLong)nodeArrayList2.get(0);
        tasNode4 = (TAs)nodeArrayList3.get(0);
        tparenteseeNode5 = (TParenteseE)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);
        tparentesedNode7 = (TParenteseD)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        pcomandoNode9 = (PComando)nodeArrayList8.get(0);

        pcomandoNode1 = new AAsLongAsComando(tasNode2, tlongNode3, tasNode4, tparenteseeNode5, pexprNode6, tparentesedNode7, tdoNode8, pcomandoNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AConsideringComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TConsidering tconsideringNode2;
        PLocal plocalNode3;
        TFrom tfromNode4;
        PExpr pexprNode5;
        TTo ttoNode6;
        PExpr pexprNode7;
        TBy tbyNode8;
        PExpr pexprNode9;
        TDo tdoNode10;
        PComando pcomandoNode11;
        tconsideringNode2 = (TConsidering)nodeArrayList1.get(0);
        plocalNode3 = (PLocal)nodeArrayList2.get(0);
        tfromNode4 = (TFrom)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        ttoNode6 = (TTo)nodeArrayList5.get(0);
        pexprNode7 = (PExpr)nodeArrayList6.get(0);
        tbyNode8 = (TBy)nodeArrayList7.get(0);
        pexprNode9 = (PExpr)nodeArrayList8.get(0);
        tdoNode10 = (TDo)nodeArrayList9.get(0);
        pcomandoNode11 = (PComando)nodeArrayList10.get(0);

        pcomandoNode1 = new AConsideringComando(tconsideringNode2, plocalNode3, tfromNode4, pexprNode5, ttoNode6, pexprNode7, tbyNode8, pexprNode9, tdoNode10, pcomandoNode11);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AConditionalComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TIn tinNode2;
        TCase tcaseNode3;
        TThat tthatNode4;
        TParenteseE tparenteseeNode5;
        PExpr pexprNode6;
        TParenteseD tparentesedNode7;
        TDo tdoNode8;
        POtherwiseExpr potherwiseexprNode9;
        tinNode2 = (TIn)nodeArrayList1.get(0);
        tcaseNode3 = (TCase)nodeArrayList2.get(0);
        tthatNode4 = (TThat)nodeArrayList3.get(0);
        tparenteseeNode5 = (TParenteseE)nodeArrayList4.get(0);
        pexprNode6 = (PExpr)nodeArrayList5.get(0);
        tparentesedNode7 = (TParenteseD)nodeArrayList6.get(0);
        tdoNode8 = (TDo)nodeArrayList7.get(0);
        potherwiseexprNode9 = (POtherwiseExpr)nodeArrayList8.get(0);

        pcomandoNode1 = new AConditionalComando(tinNode2, tcaseNode3, tthatNode4, tparenteseeNode5, pexprNode6, tparentesedNode7, tdoNode8, potherwiseexprNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AAcapturecomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCapture tcaptureNode2;
        TParenteseE tparenteseeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PLocal plocalNode5;
        TParenteseD tparentesedNode6;
        TPonto tpontoNode7;
        tcaptureNode2 = (TCapture)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        {
            // Block
        }
        plocalNode5 = (PLocal)nodeArrayList3.get(0);
        tparentesedNode6 = (TParenteseD)nodeArrayList4.get(0);
        tpontoNode7 = (TPonto)nodeArrayList5.get(0);

        pcomandoNode1 = new ACaptureComando(tcaptureNode2, tparenteseeNode3, listNode4, plocalNode5, tparentesedNode6, tpontoNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAcapturecomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TCapture tcaptureNode2;
        TParenteseE tparenteseeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PLocal plocalNode6;
        TParenteseD tparentesedNode7;
        TPonto tpontoNode8;
        tcaptureNode2 = (TCapture)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        plocalNode6 = (PLocal)nodeArrayList4.get(0);
        tparentesedNode7 = (TParenteseD)nodeArrayList5.get(0);
        tpontoNode8 = (TPonto)nodeArrayList6.get(0);

        pcomandoNode1 = new ACaptureComando(tcaptureNode2, tparenteseeNode3, listNode5, plocalNode6, tparentesedNode7, tpontoNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAshowcomando1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TShow tshowNode2;
        TParenteseE tparenteseeNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PExpr pexprNode5;
        TParenteseD tparentesedNode6;
        TPonto tpontoNode7;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        {
            // Block
        }
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        tparentesedNode6 = (TParenteseD)nodeArrayList4.get(0);
        tpontoNode7 = (TPonto)nodeArrayList5.get(0);

        pcomandoNode1 = new AShowComando(tshowNode2, tparenteseeNode3, listNode4, pexprNode5, tparentesedNode6, tpontoNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAshowcomando2Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TShow tshowNode2;
        TParenteseE tparenteseeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PExpr pexprNode6;
        TParenteseD tparentesedNode7;
        TPonto tpontoNode8;
        tshowNode2 = (TShow)nodeArrayList1.get(0);
        tparenteseeNode3 = (TParenteseE)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        pexprNode6 = (PExpr)nodeArrayList4.get(0);
        tparentesedNode7 = (TParenteseD)nodeArrayList5.get(0);
        tpontoNode8 = (TPonto)nodeArrayList6.get(0);

        pcomandoNode1 = new AShowComando(tshowNode2, tparenteseeNode3, listNode5, pexprNode6, tparentesedNode7, tpontoNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABlocoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PBloco pblocoNode2;
        pblocoNode2 = (PBloco)nodeArrayList1.get(0);

        pcomandoNode1 = new ABlocoComando(pblocoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AOnlyComandoOtherwiseExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtherwiseExpr potherwiseexprNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        potherwiseexprNode1 = new AOnlyComandoOtherwiseExpr(pcomandoNode2);
        }
	nodeList.add(potherwiseexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AOtherwiseExprOtherwiseExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POtherwiseExpr potherwiseexprNode1;
        {
            // Block
        TOtherwise totherwiseNode2;
        TDo tdoNode3;
        PComando pcomandoNode4;
        totherwiseNode2 = (TOtherwise)nodeArrayList1.get(0);
        tdoNode3 = (TDo)nodeArrayList2.get(0);
        pcomandoNode4 = (PComando)nodeArrayList3.get(0);

        potherwiseexprNode1 = new AOtherwiseExprOtherwiseExpr(totherwiseNode2, tdoNode3, pcomandoNode4);
        }
	nodeList.add(potherwiseexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ALocalVirgulaLocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalVirgula plocalvirgulaNode1;
        {
            // Block
        PLocal plocalNode2;
        TVirgula tvirgulaNode3;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        plocalvirgulaNode1 = new ALocalVirgulaLocalVirgula(plocalNode2, tvirgulaNode3);
        }
	nodeList.add(plocalvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExprVirgulaExprVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprVirgula pexprvirgulaNode1;
        {
            // Block
        PExpr pexprNode2;
        TVirgula tvirgulaNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pexprvirgulaNode1 = new AExprVirgulaExprVirgula(pexprNode2, tvirgulaNode3);
        }
	nodeList.add(pexprvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExprOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExprOr pexprorNode2;
        pexprorNode2 = (PExprOr)nodeArrayList1.get(0);

        pexprNode1 = new AExprOrExpr(pexprorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AExprAndExprOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprOr pexprorNode1;
        {
            // Block
        PExprAnd pexprandNode2;
        pexprandNode2 = (PExprAnd)nodeArrayList1.get(0);

        pexprorNode1 = new AExprAndExprOr(pexprandNode2);
        }
	nodeList.add(pexprorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AOrExprOr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprOr pexprorNode1;
        {
            // Block
        PExprOr pexprorNode2;
        TOr torNode3;
        PExprAnd pexprandNode4;
        pexprorNode2 = (PExprOr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pexprandNode4 = (PExprAnd)nodeArrayList3.get(0);

        pexprorNode1 = new AOrExprOr(pexprorNode2, torNode3, pexprandNode4);
        }
	nodeList.add(pexprorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExprNegacaoExprAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAnd pexprandNode1;
        {
            // Block
        PExprNegacao pexprnegacaoNode2;
        pexprnegacaoNode2 = (PExprNegacao)nodeArrayList1.get(0);

        pexprandNode1 = new AExprNegacaoExprAnd(pexprnegacaoNode2);
        }
	nodeList.add(pexprandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAndExprAnd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprAnd pexprandNode1;
        {
            // Block
        PExprAnd pexprandNode2;
        TAnd tandNode3;
        PExprNegacao pexprnegacaoNode4;
        pexprandNode2 = (PExprAnd)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pexprnegacaoNode4 = (PExprNegacao)nodeArrayList3.get(0);

        pexprandNode1 = new AAndExprAnd(pexprandNode2, tandNode3, pexprnegacaoNode4);
        }
	nodeList.add(pexprandNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExprIgualdadeExprNegacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprNegacao pexprnegacaoNode1;
        {
            // Block
        PExprIgualdade pexprigualdadeNode2;
        pexprigualdadeNode2 = (PExprIgualdade)nodeArrayList1.get(0);

        pexprnegacaoNode1 = new AExprIgualdadeExprNegacao(pexprigualdadeNode2);
        }
	nodeList.add(pexprnegacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ANotExprNegacao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprNegacao pexprnegacaoNode1;
        {
            // Block
        TNot tnotNode2;
        PExprNegacao pexprnegacaoNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pexprnegacaoNode3 = (PExprNegacao)nodeArrayList2.get(0);

        pexprnegacaoNode1 = new ANotExprNegacao(tnotNode2, pexprnegacaoNode3);
        }
	nodeList.add(pexprnegacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExprMaiorIgualExprIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprIgualdade pexprigualdadeNode1;
        {
            // Block
        PExprMaiorIgual pexprmaiorigualNode2;
        pexprmaiorigualNode2 = (PExprMaiorIgual)nodeArrayList1.get(0);

        pexprigualdadeNode1 = new AExprMaiorIgualExprIgualdade(pexprmaiorigualNode2);
        }
	nodeList.add(pexprigualdadeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIgualdadeExprIgualdade */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprIgualdade pexprigualdadeNode1;
        {
            // Block
        PExprIgualdade pexprigualdadeNode2;
        TIgualdade tigualdadeNode3;
        PExprMaiorIgual pexprmaiorigualNode4;
        pexprigualdadeNode2 = (PExprIgualdade)nodeArrayList1.get(0);
        tigualdadeNode3 = (TIgualdade)nodeArrayList2.get(0);
        pexprmaiorigualNode4 = (PExprMaiorIgual)nodeArrayList3.get(0);

        pexprigualdadeNode1 = new AIgualdadeExprIgualdade(pexprigualdadeNode2, tigualdadeNode3, pexprmaiorigualNode4);
        }
	nodeList.add(pexprigualdadeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExprMaiorExprMaiorIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMaiorIgual pexprmaiorigualNode1;
        {
            // Block
        PExprMaior pexprmaiorNode2;
        pexprmaiorNode2 = (PExprMaior)nodeArrayList1.get(0);

        pexprmaiorigualNode1 = new AExprMaiorExprMaiorIgual(pexprmaiorNode2);
        }
	nodeList.add(pexprmaiorigualNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMaiorIgualExprMaiorIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMaiorIgual pexprmaiorigualNode1;
        {
            // Block
        PExprMaiorIgual pexprmaiorigualNode2;
        TMaiorIgual tmaiorigualNode3;
        PExprMaior pexprmaiorNode4;
        pexprmaiorigualNode2 = (PExprMaiorIgual)nodeArrayList1.get(0);
        tmaiorigualNode3 = (TMaiorIgual)nodeArrayList2.get(0);
        pexprmaiorNode4 = (PExprMaior)nodeArrayList3.get(0);

        pexprmaiorigualNode1 = new AMaiorIgualExprMaiorIgual(pexprmaiorigualNode2, tmaiorigualNode3, pexprmaiorNode4);
        }
	nodeList.add(pexprmaiorigualNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExprMenorExprMaior */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMaior pexprmaiorNode1;
        {
            // Block
        PExprMenor pexprmenorNode2;
        pexprmenorNode2 = (PExprMenor)nodeArrayList1.get(0);

        pexprmaiorNode1 = new AExprMenorExprMaior(pexprmenorNode2);
        }
	nodeList.add(pexprmaiorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMaiorExprMaior */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMaior pexprmaiorNode1;
        {
            // Block
        PExprMaior pexprmaiorNode2;
        TMaior tmaiorNode3;
        PExprMenor pexprmenorNode4;
        pexprmaiorNode2 = (PExprMaior)nodeArrayList1.get(0);
        tmaiorNode3 = (TMaior)nodeArrayList2.get(0);
        pexprmenorNode4 = (PExprMenor)nodeArrayList3.get(0);

        pexprmaiorNode1 = new AMaiorExprMaior(pexprmaiorNode2, tmaiorNode3, pexprmenorNode4);
        }
	nodeList.add(pexprmaiorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExprMenorIgualExprMenor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMenor pexprmenorNode1;
        {
            // Block
        PExprMenorIgual pexprmenorigualNode2;
        pexprmenorigualNode2 = (PExprMenorIgual)nodeArrayList1.get(0);

        pexprmenorNode1 = new AExprMenorIgualExprMenor(pexprmenorigualNode2);
        }
	nodeList.add(pexprmenorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AMenorExprMenor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMenor pexprmenorNode1;
        {
            // Block
        PExprMenor pexprmenorNode2;
        TMenor tmenorNode3;
        PExprMenorIgual pexprmenorigualNode4;
        pexprmenorNode2 = (PExprMenor)nodeArrayList1.get(0);
        tmenorNode3 = (TMenor)nodeArrayList2.get(0);
        pexprmenorigualNode4 = (PExprMenorIgual)nodeArrayList3.get(0);

        pexprmenorNode1 = new AMenorExprMenor(pexprmenorNode2, tmenorNode3, pexprmenorigualNode4);
        }
	nodeList.add(pexprmenorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AExprDiferenteExprMenorIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMenorIgual pexprmenorigualNode1;
        {
            // Block
        PExprDiferente pexprdiferenteNode2;
        pexprdiferenteNode2 = (PExprDiferente)nodeArrayList1.get(0);

        pexprmenorigualNode1 = new AExprDiferenteExprMenorIgual(pexprdiferenteNode2);
        }
	nodeList.add(pexprmenorigualNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AMenorIgualExprMenorIgual */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMenorIgual pexprmenorigualNode1;
        {
            // Block
        PExprMenorIgual pexprmenorigualNode2;
        TMenorIgual tmenorigualNode3;
        PExprDiferente pexprdiferenteNode4;
        pexprmenorigualNode2 = (PExprMenorIgual)nodeArrayList1.get(0);
        tmenorigualNode3 = (TMenorIgual)nodeArrayList2.get(0);
        pexprdiferenteNode4 = (PExprDiferente)nodeArrayList3.get(0);

        pexprmenorigualNode1 = new AMenorIgualExprMenorIgual(pexprmenorigualNode2, tmenorigualNode3, pexprdiferenteNode4);
        }
	nodeList.add(pexprmenorigualNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AExprMatematicaExprDiferente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprDiferente pexprdiferenteNode1;
        {
            // Block
        PExprMatematica pexprmatematicaNode2;
        pexprmatematicaNode2 = (PExprMatematica)nodeArrayList1.get(0);

        pexprdiferenteNode1 = new AExprMatematicaExprDiferente(pexprmatematicaNode2);
        }
	nodeList.add(pexprdiferenteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADiferenteExprDiferente */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprDiferente pexprdiferenteNode1;
        {
            // Block
        PExprDiferente pexprdiferenteNode2;
        TDiferente tdiferenteNode3;
        PExprMatematica pexprmatematicaNode4;
        pexprdiferenteNode2 = (PExprDiferente)nodeArrayList1.get(0);
        tdiferenteNode3 = (TDiferente)nodeArrayList2.get(0);
        pexprmatematicaNode4 = (PExprMatematica)nodeArrayList3.get(0);

        pexprdiferenteNode1 = new ADiferenteExprDiferente(pexprdiferenteNode2, tdiferenteNode3, pexprmatematicaNode4);
        }
	nodeList.add(pexprdiferenteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AFatorExprMatematica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMatematica pexprmatematicaNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        pexprmatematicaNode1 = new AFatorExprMatematica(pfatorNode2);
        }
	nodeList.add(pexprmatematicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASomaExprMatematica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMatematica pexprmatematicaNode1;
        {
            // Block
        PExprMatematica pexprmatematicaNode2;
        TMais tmaisNode3;
        PFator pfatorNode4;
        pexprmatematicaNode2 = (PExprMatematica)nodeArrayList1.get(0);
        tmaisNode3 = (TMais)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexprmatematicaNode1 = new ASomaExprMatematica(pexprmatematicaNode2, tmaisNode3, pfatorNode4);
        }
	nodeList.add(pexprmatematicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AMenosExprMatematica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprMatematica pexprmatematicaNode1;
        {
            // Block
        PExprMatematica pexprmatematicaNode2;
        TMenos tmenosNode3;
        PFator pfatorNode4;
        pexprmatematicaNode2 = (PExprMatematica)nodeArrayList1.get(0);
        tmenosNode3 = (TMenos)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        pexprmatematicaNode1 = new AMenosExprMatematica(pexprmatematicaNode2, tmenosNode3, pfatorNode4);
        }
	nodeList.add(pexprmatematicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExprNegativoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PExprNegativo pexprnegativoNode2;
        pexprnegativoNode2 = (PExprNegativo)nodeArrayList1.get(0);

        pfatorNode1 = new AExprNegativoFator(pexprnegativoNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AMultiplicacaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TMultiplicacao tmultiplicacaoNode3;
        PExprNegativo pexprnegativoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tmultiplicacaoNode3 = (TMultiplicacao)nodeArrayList2.get(0);
        pexprnegativoNode4 = (PExprNegativo)nodeArrayList3.get(0);

        pfatorNode1 = new AMultiplicacaoFator(pfatorNode2, tmultiplicacaoNode3, pexprnegativoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ADivisaoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PFator pfatorNode2;
        TDivisao tdivisaoNode3;
        PExprNegativo pexprnegativoNode4;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);
        tdivisaoNode3 = (TDivisao)nodeArrayList2.get(0);
        pexprnegativoNode4 = (PExprNegativo)nodeArrayList3.get(0);

        pfatorNode1 = new ADivisaoFator(pfatorNode2, tdivisaoNode3, pexprnegativoNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATermoExprNegativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprNegativo pexprnegativoNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pexprnegativoNode1 = new ATermoExprNegativo(ptermoNode2);
        }
	nodeList.add(pexprnegativoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ANegativoExprNegativo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprNegativo pexprnegativoNode1;
        {
            // Block
        TMenos tmenosNode2;
        PExprNegativo pexprnegativoNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pexprnegativoNode3 = (PExprNegativo)nodeArrayList2.get(0);

        pexprnegativoNode1 = new ANegativoExprNegativo(tmenosNode2, pexprnegativoNode3);
        }
	nodeList.add(pexprnegativoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANumberTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        ptermoNode1 = new ANumberTermo(tnumberNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAnswerTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PAnswer panswerNode2;
        panswerNode2 = (PAnswer)nodeArrayList1.get(0);

        ptermoNode1 = new AAnswerTermo(panswerNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASymbolTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        ptermoNode1 = new ASymbolTermo(tsymbolNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ASymbolVectorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TSymbolVector tsymbolvectorNode2;
        tsymbolvectorNode2 = (TSymbolVector)nodeArrayList1.get(0);

        ptermoNode1 = new ASymbolVectorTermo(tsymbolvectorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ALocalTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PLocal plocalNode2;
        plocalNode2 = (PLocal)nodeArrayList1.get(0);

        ptermoNode1 = new ALocalTermo(plocalNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AParentesesTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        TParenteseE tparenteseeNode2;
        PExpr pexprNode3;
        TParenteseD tparentesedNode4;
        tparenteseeNode2 = (TParenteseE)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparentesedNode4 = (TParenteseD)nodeArrayList3.get(0);

        ptermoNode1 = new AParentesesTermo(tparenteseeNode2, pexprNode3, tparentesedNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AYesAnswer */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAnswer panswerNode1;
        {
            // Block
        TYes tyesNode2;
        tyesNode2 = (TYes)nodeArrayList1.get(0);

        panswerNode1 = new AYesAnswer(tyesNode2);
        }
	nodeList.add(panswerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANoAnswer */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAnswer panswerNode1;
        {
            // Block
        TNo tnoNode2;
        tnoNode2 = (TNo)nodeArrayList1.get(0);

        panswerNode1 = new ANoAnswer(tnoNode2);
        }
	nodeList.add(panswerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$Address */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAddress paddressNode1;
        paddressNode1 = (PAddress)nodeArrayList1.get(0);
	if(paddressNode1 != null)
	{
	  listNode2.add(paddressNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$Address */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAddress paddressNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paddressNode2 = (PAddress)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paddressNode2 != null)
	{
	  listNode3.add(paddressNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$LocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalVirgula plocalvirgulaNode1;
        plocalvirgulaNode1 = (PLocalVirgula)nodeArrayList1.get(0);
	if(plocalvirgulaNode1 != null)
	{
	  listNode2.add(plocalvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$LocalVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalVirgula plocalvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocalvirgulaNode2 = (PLocalVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocalvirgulaNode2 != null)
	{
	  listNode3.add(plocalvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$ExprVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExprVirgula pexprvirgulaNode1;
        pexprvirgulaNode1 = (PExprVirgula)nodeArrayList1.get(0);
	if(pexprvirgulaNode1 != null)
	{
	  listNode2.add(pexprvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$ExprVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExprVirgula pexprvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprvirgulaNode2 = (PExprVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprvirgulaNode2 != null)
	{
	  listNode3.add(pexprvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {3, SHIFT, 1}, },
			{{-1, ERROR, 1}, {47, SHIFT, 3}, },
			{{-1, ERROR, 2}, {51, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {41, SHIFT, 4}, },
			{{-1, ERROR, 4}, {38, SHIFT, 6}, {39, SHIFT, 7}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 6}, {4, SHIFT, 9}, {5, SHIFT, 10}, {6, SHIFT, 11}, },
			{{-1, ERROR, 7}, {4, SHIFT, 9}, {5, SHIFT, 10}, {6, SHIFT, 11}, },
			{{-1, ERROR, 8}, {27, SHIFT, 15}, {29, SHIFT, 16}, {33, SHIFT, 17}, {41, SHIFT, 4}, {43, SHIFT, 18}, {44, SHIFT, 19}, {47, SHIFT, 20}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 12}, {47, SHIFT, 24}, },
			{{-1, REDUCE, 9}, {40, SHIFT, 25}, },
			{{-1, ERROR, 14}, {47, SHIFT, 26}, },
			{{-1, ERROR, 15}, {28, SHIFT, 27}, },
			{{-1, ERROR, 16}, {30, SHIFT, 28}, },
			{{-1, ERROR, 17}, {47, SHIFT, 20}, },
			{{-1, ERROR, 18}, {7, SHIFT, 30}, },
			{{-1, ERROR, 19}, {7, SHIFT, 31}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 22}, {9, SHIFT, 32}, {16, SHIFT, 33}, },
			{{-1, ERROR, 23}, {42, SHIFT, 35}, },
			{{-1, REDUCE, 5}, {16, SHIFT, 36}, },
			{{-1, ERROR, 25}, {9, SHIFT, 32}, },
			{{-1, ERROR, 26}, {1, SHIFT, 40}, },
			{{-1, ERROR, 27}, {27, SHIFT, 41}, },
			{{-1, ERROR, 28}, {31, SHIFT, 42}, },
			{{-1, ERROR, 29}, {9, SHIFT, 32}, {34, SHIFT, 43}, },
			{{-1, ERROR, 30}, {47, SHIFT, 20}, },
			{{-1, ERROR, 31}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 32}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 33}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 36}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 37}, {1, SHIFT, 76}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 10}, {9, SHIFT, 32}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 41}, {7, SHIFT, 78}, },
			{{-1, ERROR, 42}, {7, SHIFT, 79}, },
			{{-1, ERROR, 43}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 44}, {2, SHIFT, 81}, {8, SHIFT, 82}, {9, SHIFT, 32}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 46}, {47, SHIFT, 20}, },
			{{-1, ERROR, 47}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 48}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 49}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 58}, {9, SHIFT, 32}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 57}, {2, SHIFT, 88}, {8, SHIFT, 89}, },
			{{-1, REDUCE, 27}, {25, SHIFT, 90}, },
			{{-1, REDUCE, 28}, {24, SHIFT, 91}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 32}, {17, SHIFT, 92}, },
			{{-1, REDUCE, 34}, {20, SHIFT, 93}, },
			{{-1, REDUCE, 36}, {22, SHIFT, 94}, },
			{{-1, REDUCE, 38}, {21, SHIFT, 95}, },
			{{-1, REDUCE, 40}, {19, SHIFT, 96}, },
			{{-1, REDUCE, 42}, {18, SHIFT, 97}, },
			{{-1, REDUCE, 44}, {11, SHIFT, 98}, {12, SHIFT, 99}, },
			{{-1, REDUCE, 46}, {13, SHIFT, 100}, {14, SHIFT, 101}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 72}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 73}, {10, SHIFT, 104}, },
			{{-1, ERROR, 74}, {1, SHIFT, 105}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 78}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 79}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 80}, {35, SHIFT, 108}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 82}, {1, SHIFT, 109}, },
			{{-1, ERROR, 83}, {2, SHIFT, 81}, {8, SHIFT, 110}, {9, SHIFT, 32}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 86}, {8, SHIFT, 111}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 89}, {1, SHIFT, 112}, },
			{{-1, ERROR, 90}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 91}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 92}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 93}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 94}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 95}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 96}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 97}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 98}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 99}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 100}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, ERROR, 101}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 103}, {2, SHIFT, 88}, {8, SHIFT, 125}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 106}, {8, SHIFT, 126}, },
			{{-1, ERROR, 107}, {8, SHIFT, 127}, },
			{{-1, ERROR, 108}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 110}, {1, SHIFT, 129}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 29}, {24, SHIFT, 91}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 35}, {20, SHIFT, 93}, },
			{{-1, REDUCE, 37}, {22, SHIFT, 94}, },
			{{-1, REDUCE, 39}, {21, SHIFT, 95}, },
			{{-1, REDUCE, 41}, {19, SHIFT, 96}, },
			{{-1, REDUCE, 43}, {18, SHIFT, 97}, },
			{{-1, REDUCE, 45}, {11, SHIFT, 98}, {12, SHIFT, 99}, },
			{{-1, REDUCE, 48}, {13, SHIFT, 100}, {14, SHIFT, 101}, },
			{{-1, REDUCE, 47}, {13, SHIFT, 100}, {14, SHIFT, 101}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 125}, {1, SHIFT, 130}, },
			{{-1, ERROR, 126}, {37, SHIFT, 131}, },
			{{-1, ERROR, 127}, {37, SHIFT, 132}, },
			{{-1, ERROR, 128}, {36, SHIFT, 133}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 131}, {27, SHIFT, 15}, {29, SHIFT, 16}, {33, SHIFT, 17}, {41, SHIFT, 4}, {43, SHIFT, 18}, {44, SHIFT, 19}, {47, SHIFT, 20}, },
			{{-1, ERROR, 132}, {27, SHIFT, 15}, {29, SHIFT, 16}, {32, SHIFT, 135}, {33, SHIFT, 17}, {41, SHIFT, 4}, {43, SHIFT, 18}, {44, SHIFT, 19}, {47, SHIFT, 20}, },
			{{-1, ERROR, 133}, {0, SHIFT, 47}, {7, SHIFT, 48}, {11, SHIFT, 49}, {45, SHIFT, 50}, {46, SHIFT, 51}, {47, SHIFT, 20}, {48, SHIFT, 52}, {49, SHIFT, 53}, {50, SHIFT, 54}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 135}, {37, SHIFT, 139}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 138}, {37, SHIFT, 140}, },
			{{-1, ERROR, 139}, {27, SHIFT, 15}, {29, SHIFT, 16}, {33, SHIFT, 17}, {41, SHIFT, 4}, {43, SHIFT, 18}, {44, SHIFT, 19}, {47, SHIFT, 20}, },
			{{-1, ERROR, 140}, {27, SHIFT, 15}, {29, SHIFT, 16}, {33, SHIFT, 17}, {41, SHIFT, 4}, {43, SHIFT, 18}, {44, SHIFT, 19}, {47, SHIFT, 20}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 16}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 21}, {3, 5}, },
			{{-1, 8}, },
			{{-1, 37}, },
			{{-1, 12}, {7, 13}, },
			{{-1, 14}, },
			{{-1, 55}, {8, 22}, {17, 29}, {30, 44}, {46, 83}, {131, 22}, {132, 22}, {139, 22}, {140, 22}, },
			{{-1, 34}, {25, 38}, {39, 77}, },
			{{-1, 23}, {131, 134}, {132, 136}, {139, 141}, {140, 142}, },
			{{-1, 137}, },
			{{-1, 45}, {46, 84}, },
			{{-1, 56}, {72, 102}, },
			{{-1, 57}, {32, 73}, {33, 74}, {36, 75}, {43, 80}, {48, 86}, {72, 103}, {78, 106}, {79, 107}, {108, 128}, {133, 138}, },
			{{-1, 58}, },
			{{-1, 59}, {90, 113}, },
			{{-1, 60}, {47, 85}, {91, 114}, },
			{{-1, 61}, },
			{{-1, 62}, {92, 115}, },
			{{-1, 63}, {93, 116}, },
			{{-1, 64}, {94, 117}, },
			{{-1, 65}, {95, 118}, },
			{{-1, 66}, {96, 119}, },
			{{-1, 67}, {97, 120}, },
			{{-1, 68}, {98, 121}, {99, 122}, },
			{{-1, 69}, {49, 87}, {100, 123}, {101, 124}, },
			{{-1, 70}, },
			{{-1, 71}, },
			{{-1, 39}, },
			{{-1, 46}, },
			{{-1, 72}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'code'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'unalterable', 'alterable'",
			"expecting: 'number', 'answer', 'symbol'",
			"expecting: 'as', 'in', 'considering', 'start', 'capture', 'show', id",
			"expecting: 'vector', id",
			"expecting: 'long'",
			"expecting: 'case'",
			"expecting: '('",
			"expecting: '.', ',', ')', '[', ']', '-', '+', '*', '/', '<<', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'from', 'to', 'by', 'do'",
			"expecting: 'finish'",
			"expecting: '[', '<<'",
			"expecting: '.', '<<'",
			"expecting: '['",
			"expecting: '.'",
			"expecting: 'as'",
			"expecting: 'that'",
			"expecting: '[', 'from'",
			"expecting: '!', '(', '-', 'yes', 'no', id, symbol, symbol vector, number",
			"expecting: 'finish', EOF",
			"expecting: '[', id",
			"expecting: ',', ')', '['",
			"expecting: '(', '-', 'yes', 'no', id, symbol, symbol vector, number",
			"expecting: '.', ',', ')', ']', '-', '+', '*', '/', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', '[', ']', '-', '+', '*', '/', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: ',', ')'",
			"expecting: '.', ',', ')', ']', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '==', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '==', '>=', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '==', '>=', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '==', '>=', '<', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '==', '<=', '>=', '<', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: '.', ',', ')', ']', '-', '+', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'to', 'by', 'do'",
			"expecting: ']'",
			"expecting: 'to'",
			"expecting: ')'",
			"expecting: '.', ',', ')', '[', ']', '-', '+', '*', '/', '<<', '==', '!=', '<=', '>=', '<', '>', 'and', 'or', 'from', 'to', 'by', 'do', id",
			"expecting: 'do'",
			"expecting: 'by'",
			"expecting: 'as', 'in', 'otherwise', 'considering', 'start', 'capture', 'show', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 5, 6, 7, 7, 7, 1, 7, 1, 8, 9, 1, 10, 10, 11, 12, 13, 12, 14, 15, 16, 17, 18, 19, 1, 20, 20, 20, 11, 21, 20, 16, 22, 22, 6, 10, 10, 20, 23, 1, 1, 20, 20, 24, 25, 25, 25, 25, 25, 26, 20, 27, 28, 29, 29, 30, 31, 32, 33, 34, 35, 36, 25, 25, 25, 25, 20, 37, 16, 16, 6, 22, 20, 20, 38, 1, 16, 23, 1, 29, 39, 25, 20, 16, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 20, 27, 40, 12, 39, 39, 20, 12, 16, 25, 12, 29, 29, 31, 32, 33, 34, 35, 36, 25, 25, 25, 25, 16, 41, 41, 42, 12, 12, 6, 43, 20, 12, 41, 12, 12, 41, 6, 6, 12, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}

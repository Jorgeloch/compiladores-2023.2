/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import cida.analysis.*;

@SuppressWarnings("nls")
public final class AExprMenorIgualExprMenor extends PExprMenor
{
    private PExprMenorIgual _exprMenorIgual_;

    public AExprMenorIgualExprMenor()
    {
        // Constructor
    }

    public AExprMenorIgualExprMenor(
        @SuppressWarnings("hiding") PExprMenorIgual _exprMenorIgual_)
    {
        // Constructor
        setExprMenorIgual(_exprMenorIgual_);

    }

    @Override
    public Object clone()
    {
        return new AExprMenorIgualExprMenor(
            cloneNode(this._exprMenorIgual_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExprMenorIgualExprMenor(this);
    }

    public PExprMenorIgual getExprMenorIgual()
    {
        return this._exprMenorIgual_;
    }

    public void setExprMenorIgual(PExprMenorIgual node)
    {
        if(this._exprMenorIgual_ != null)
        {
            this._exprMenorIgual_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprMenorIgual_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exprMenorIgual_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exprMenorIgual_ == child)
        {
            this._exprMenorIgual_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exprMenorIgual_ == oldChild)
        {
            setExprMenorIgual((PExprMenorIgual) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import cida.analysis.*;

@SuppressWarnings("nls")
public final class AAndExprAnd extends PExprAnd
{
    private PExprAnd _exprAnd_;
    private TAnd _and_;
    private PExprNegacao _exprNegacao_;

    public AAndExprAnd()
    {
        // Constructor
    }

    public AAndExprAnd(
        @SuppressWarnings("hiding") PExprAnd _exprAnd_,
        @SuppressWarnings("hiding") TAnd _and_,
        @SuppressWarnings("hiding") PExprNegacao _exprNegacao_)
    {
        // Constructor
        setExprAnd(_exprAnd_);

        setAnd(_and_);

        setExprNegacao(_exprNegacao_);

    }

    @Override
    public Object clone()
    {
        return new AAndExprAnd(
            cloneNode(this._exprAnd_),
            cloneNode(this._and_),
            cloneNode(this._exprNegacao_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAndExprAnd(this);
    }

    public PExprAnd getExprAnd()
    {
        return this._exprAnd_;
    }

    public void setExprAnd(PExprAnd node)
    {
        if(this._exprAnd_ != null)
        {
            this._exprAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprAnd_ = node;
    }

    public TAnd getAnd()
    {
        return this._and_;
    }

    public void setAnd(TAnd node)
    {
        if(this._and_ != null)
        {
            this._and_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._and_ = node;
    }

    public PExprNegacao getExprNegacao()
    {
        return this._exprNegacao_;
    }

    public void setExprNegacao(PExprNegacao node)
    {
        if(this._exprNegacao_ != null)
        {
            this._exprNegacao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprNegacao_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exprAnd_)
            + toString(this._and_)
            + toString(this._exprNegacao_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exprAnd_ == child)
        {
            this._exprAnd_ = null;
            return;
        }

        if(this._and_ == child)
        {
            this._and_ = null;
            return;
        }

        if(this._exprNegacao_ == child)
        {
            this._exprNegacao_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exprAnd_ == oldChild)
        {
            setExprAnd((PExprAnd) newChild);
            return;
        }

        if(this._and_ == oldChild)
        {
            setAnd((TAnd) newChild);
            return;
        }

        if(this._exprNegacao_ == oldChild)
        {
            setExprNegacao((PExprNegacao) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

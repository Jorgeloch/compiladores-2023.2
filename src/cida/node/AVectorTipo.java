/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import java.util.*;
import cida.analysis.*;

@SuppressWarnings("nls")
public final class AVectorTipo extends PTipo
{
    private PTipoBase _tipoBase_;
    private TVector _vector_;
    private final LinkedList<PAddress> _address_ = new LinkedList<PAddress>();

    public AVectorTipo()
    {
        // Constructor
    }

    public AVectorTipo(
        @SuppressWarnings("hiding") PTipoBase _tipoBase_,
        @SuppressWarnings("hiding") TVector _vector_,
        @SuppressWarnings("hiding") List<?> _address_)
    {
        // Constructor
        setTipoBase(_tipoBase_);

        setVector(_vector_);

        setAddress(_address_);

    }

    @Override
    public Object clone()
    {
        return new AVectorTipo(
            cloneNode(this._tipoBase_),
            cloneNode(this._vector_),
            cloneList(this._address_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVectorTipo(this);
    }

    public PTipoBase getTipoBase()
    {
        return this._tipoBase_;
    }

    public void setTipoBase(PTipoBase node)
    {
        if(this._tipoBase_ != null)
        {
            this._tipoBase_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipoBase_ = node;
    }

    public TVector getVector()
    {
        return this._vector_;
    }

    public void setVector(TVector node)
    {
        if(this._vector_ != null)
        {
            this._vector_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._vector_ = node;
    }

    public LinkedList<PAddress> getAddress()
    {
        return this._address_;
    }

    public void setAddress(List<?> list)
    {
        for(PAddress e : this._address_)
        {
            e.parent(null);
        }
        this._address_.clear();

        for(Object obj_e : list)
        {
            PAddress e = (PAddress) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._address_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipoBase_)
            + toString(this._vector_)
            + toString(this._address_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipoBase_ == child)
        {
            this._tipoBase_ = null;
            return;
        }

        if(this._vector_ == child)
        {
            this._vector_ = null;
            return;
        }

        if(this._address_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipoBase_ == oldChild)
        {
            setTipoBase((PTipoBase) newChild);
            return;
        }

        if(this._vector_ == oldChild)
        {
            setVector((TVector) newChild);
            return;
        }

        for(ListIterator<PAddress> i = this._address_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAddress) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}

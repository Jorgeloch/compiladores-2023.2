/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import cida.analysis.*;

@SuppressWarnings("nls")
public final class AOrExprOr extends PExprOr
{
    private PExprOr _exprOr_;
    private TOr _or_;
    private PExprAnd _exprAnd_;

    public AOrExprOr()
    {
        // Constructor
    }

    public AOrExprOr(
        @SuppressWarnings("hiding") PExprOr _exprOr_,
        @SuppressWarnings("hiding") TOr _or_,
        @SuppressWarnings("hiding") PExprAnd _exprAnd_)
    {
        // Constructor
        setExprOr(_exprOr_);

        setOr(_or_);

        setExprAnd(_exprAnd_);

    }

    @Override
    public Object clone()
    {
        return new AOrExprOr(
            cloneNode(this._exprOr_),
            cloneNode(this._or_),
            cloneNode(this._exprAnd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAOrExprOr(this);
    }

    public PExprOr getExprOr()
    {
        return this._exprOr_;
    }

    public void setExprOr(PExprOr node)
    {
        if(this._exprOr_ != null)
        {
            this._exprOr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprOr_ = node;
    }

    public TOr getOr()
    {
        return this._or_;
    }

    public void setOr(TOr node)
    {
        if(this._or_ != null)
        {
            this._or_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._or_ = node;
    }

    public PExprAnd getExprAnd()
    {
        return this._exprAnd_;
    }

    public void setExprAnd(PExprAnd node)
    {
        if(this._exprAnd_ != null)
        {
            this._exprAnd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exprAnd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exprOr_)
            + toString(this._or_)
            + toString(this._exprAnd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exprOr_ == child)
        {
            this._exprOr_ = null;
            return;
        }

        if(this._or_ == child)
        {
            this._or_ = null;
            return;
        }

        if(this._exprAnd_ == child)
        {
            this._exprAnd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exprOr_ == oldChild)
        {
            setExprOr((PExprOr) newChild);
            return;
        }

        if(this._or_ == oldChild)
        {
            setOr((TOr) newChild);
            return;
        }

        if(this._exprAnd_ == oldChild)
        {
            setExprAnd((PExprAnd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import cida.analysis.*;

@SuppressWarnings("nls")
public final class AConditionalComando extends PComando
{
    private TIn _in_;
    private TCase _case_;
    private TThat _that_;
    private TParenteseE _parenteseE_;
    private PExpr _expr_;
    private TParenteseD _parenteseD_;
    private TDo _do_;
    private POtherwiseExpr _otherwiseExpr_;

    public AConditionalComando()
    {
        // Constructor
    }

    public AConditionalComando(
        @SuppressWarnings("hiding") TIn _in_,
        @SuppressWarnings("hiding") TCase _case_,
        @SuppressWarnings("hiding") TThat _that_,
        @SuppressWarnings("hiding") TParenteseE _parenteseE_,
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TParenteseD _parenteseD_,
        @SuppressWarnings("hiding") TDo _do_,
        @SuppressWarnings("hiding") POtherwiseExpr _otherwiseExpr_)
    {
        // Constructor
        setIn(_in_);

        setCase(_case_);

        setThat(_that_);

        setParenteseE(_parenteseE_);

        setExpr(_expr_);

        setParenteseD(_parenteseD_);

        setDo(_do_);

        setOtherwiseExpr(_otherwiseExpr_);

    }

    @Override
    public Object clone()
    {
        return new AConditionalComando(
            cloneNode(this._in_),
            cloneNode(this._case_),
            cloneNode(this._that_),
            cloneNode(this._parenteseE_),
            cloneNode(this._expr_),
            cloneNode(this._parenteseD_),
            cloneNode(this._do_),
            cloneNode(this._otherwiseExpr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionalComando(this);
    }

    public TIn getIn()
    {
        return this._in_;
    }

    public void setIn(TIn node)
    {
        if(this._in_ != null)
        {
            this._in_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._in_ = node;
    }

    public TCase getCase()
    {
        return this._case_;
    }

    public void setCase(TCase node)
    {
        if(this._case_ != null)
        {
            this._case_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._case_ = node;
    }

    public TThat getThat()
    {
        return this._that_;
    }

    public void setThat(TThat node)
    {
        if(this._that_ != null)
        {
            this._that_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._that_ = node;
    }

    public TParenteseE getParenteseE()
    {
        return this._parenteseE_;
    }

    public void setParenteseE(TParenteseE node)
    {
        if(this._parenteseE_ != null)
        {
            this._parenteseE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenteseE_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TParenteseD getParenteseD()
    {
        return this._parenteseD_;
    }

    public void setParenteseD(TParenteseD node)
    {
        if(this._parenteseD_ != null)
        {
            this._parenteseD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenteseD_ = node;
    }

    public TDo getDo()
    {
        return this._do_;
    }

    public void setDo(TDo node)
    {
        if(this._do_ != null)
        {
            this._do_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._do_ = node;
    }

    public POtherwiseExpr getOtherwiseExpr()
    {
        return this._otherwiseExpr_;
    }

    public void setOtherwiseExpr(POtherwiseExpr node)
    {
        if(this._otherwiseExpr_ != null)
        {
            this._otherwiseExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._otherwiseExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._in_)
            + toString(this._case_)
            + toString(this._that_)
            + toString(this._parenteseE_)
            + toString(this._expr_)
            + toString(this._parenteseD_)
            + toString(this._do_)
            + toString(this._otherwiseExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._in_ == child)
        {
            this._in_ = null;
            return;
        }

        if(this._case_ == child)
        {
            this._case_ = null;
            return;
        }

        if(this._that_ == child)
        {
            this._that_ = null;
            return;
        }

        if(this._parenteseE_ == child)
        {
            this._parenteseE_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._parenteseD_ == child)
        {
            this._parenteseD_ = null;
            return;
        }

        if(this._do_ == child)
        {
            this._do_ = null;
            return;
        }

        if(this._otherwiseExpr_ == child)
        {
            this._otherwiseExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._in_ == oldChild)
        {
            setIn((TIn) newChild);
            return;
        }

        if(this._case_ == oldChild)
        {
            setCase((TCase) newChild);
            return;
        }

        if(this._that_ == oldChild)
        {
            setThat((TThat) newChild);
            return;
        }

        if(this._parenteseE_ == oldChild)
        {
            setParenteseE((TParenteseE) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._parenteseD_ == oldChild)
        {
            setParenteseD((TParenteseD) newChild);
            return;
        }

        if(this._do_ == oldChild)
        {
            setDo((TDo) newChild);
            return;
        }

        if(this._otherwiseExpr_ == oldChild)
        {
            setOtherwiseExpr((POtherwiseExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}

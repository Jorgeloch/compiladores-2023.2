/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.node;

import java.util.*;
import cida.analysis.*;

@SuppressWarnings("nls")
public final class ACaptureComando extends PComando
{
    private TCapture _capture_;
    private TParenteseE _parenteseE_;
    private final LinkedList<PLocalVirgula> _locais_ = new LinkedList<PLocalVirgula>();
    private PLocal _local_;
    private TParenteseD _parenteseD_;
    private TPonto _ponto_;

    public ACaptureComando()
    {
        // Constructor
    }

    public ACaptureComando(
        @SuppressWarnings("hiding") TCapture _capture_,
        @SuppressWarnings("hiding") TParenteseE _parenteseE_,
        @SuppressWarnings("hiding") List<?> _locais_,
        @SuppressWarnings("hiding") PLocal _local_,
        @SuppressWarnings("hiding") TParenteseD _parenteseD_,
        @SuppressWarnings("hiding") TPonto _ponto_)
    {
        // Constructor
        setCapture(_capture_);

        setParenteseE(_parenteseE_);

        setLocais(_locais_);

        setLocal(_local_);

        setParenteseD(_parenteseD_);

        setPonto(_ponto_);

    }

    @Override
    public Object clone()
    {
        return new ACaptureComando(
            cloneNode(this._capture_),
            cloneNode(this._parenteseE_),
            cloneList(this._locais_),
            cloneNode(this._local_),
            cloneNode(this._parenteseD_),
            cloneNode(this._ponto_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACaptureComando(this);
    }

    public TCapture getCapture()
    {
        return this._capture_;
    }

    public void setCapture(TCapture node)
    {
        if(this._capture_ != null)
        {
            this._capture_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._capture_ = node;
    }

    public TParenteseE getParenteseE()
    {
        return this._parenteseE_;
    }

    public void setParenteseE(TParenteseE node)
    {
        if(this._parenteseE_ != null)
        {
            this._parenteseE_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenteseE_ = node;
    }

    public LinkedList<PLocalVirgula> getLocais()
    {
        return this._locais_;
    }

    public void setLocais(List<?> list)
    {
        for(PLocalVirgula e : this._locais_)
        {
            e.parent(null);
        }
        this._locais_.clear();

        for(Object obj_e : list)
        {
            PLocalVirgula e = (PLocalVirgula) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._locais_.add(e);
        }
    }

    public PLocal getLocal()
    {
        return this._local_;
    }

    public void setLocal(PLocal node)
    {
        if(this._local_ != null)
        {
            this._local_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._local_ = node;
    }

    public TParenteseD getParenteseD()
    {
        return this._parenteseD_;
    }

    public void setParenteseD(TParenteseD node)
    {
        if(this._parenteseD_ != null)
        {
            this._parenteseD_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenteseD_ = node;
    }

    public TPonto getPonto()
    {
        return this._ponto_;
    }

    public void setPonto(TPonto node)
    {
        if(this._ponto_ != null)
        {
            this._ponto_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ponto_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._capture_)
            + toString(this._parenteseE_)
            + toString(this._locais_)
            + toString(this._local_)
            + toString(this._parenteseD_)
            + toString(this._ponto_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._capture_ == child)
        {
            this._capture_ = null;
            return;
        }

        if(this._parenteseE_ == child)
        {
            this._parenteseE_ = null;
            return;
        }

        if(this._locais_.remove(child))
        {
            return;
        }

        if(this._local_ == child)
        {
            this._local_ = null;
            return;
        }

        if(this._parenteseD_ == child)
        {
            this._parenteseD_ = null;
            return;
        }

        if(this._ponto_ == child)
        {
            this._ponto_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._capture_ == oldChild)
        {
            setCapture((TCapture) newChild);
            return;
        }

        if(this._parenteseE_ == oldChild)
        {
            setParenteseE((TParenteseE) newChild);
            return;
        }

        for(ListIterator<PLocalVirgula> i = this._locais_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLocalVirgula) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._local_ == oldChild)
        {
            setLocal((PLocal) newChild);
            return;
        }

        if(this._parenteseD_ == oldChild)
        {
            setParenteseD((TParenteseD) newChild);
            return;
        }

        if(this._ponto_ == oldChild)
        {
            setPonto((TPonto) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
